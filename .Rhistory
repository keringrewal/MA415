col(matE)
matE
matE <- matrix(
rep(0,36),
nrow = 6,
ncol = 6
)
row(matE)
col(matE)
matE <- matrix(
rep(0,36),
nrow = 6,
ncol = 6
)
matE<-matE[abs(row(matE)- col(matE)==1)] <- 1
matE
matE <- matrix(
rep(0,36),
nrow = 6,
ncol = 6
)
matE[abs(col(matE)- row(matE) == 1)] <- 1
matE
matE <- matrix(
rep(0,36),
nrow = 6,
ncol = 6
)
matE[abs(col(matE) - row(matE) == 1)] <- 1
matE
knitr::opts_chunk$set(echo = TRUE)
matE[abs(col(matE) - row(matE)) == 1] <- 1
matE <- matrix(
rep(0,36),
nrow = 6,
ncol = 6
)
matE[abs(col(matE) - row(matE)) == 1] <- 1
matE
x <- outer(0:4, 0:4, "+")
x
x <- outer(0:4, 0:4, "+")%%5
x
y <- outer(0:9, 0:9, "+")%%10
y
z <- outer(0:8, 0:8, "-")
z
x <- outer(0:4, 0:4, "+")%%5
x
y <- outer(0:9, 0:9, "+")%%10
y
z <- outer(0:8, 0:8, "-")
z
x <- outer(0:4, 0:4, "+")%%5
x
y <- outer(0:9, 0:9, "+")%%10
y
z <- outer(0:8, 0:8, "-")%%9
z
b <- c(7, -1, -3, 5, 17)
A = outer(0:5, 0:5, "-")%%5
b <- c(7, -1, -3, 5, 17)
A = outer(0:5, 0:5, "-")%%5
A
b <- c(7, -1, -3, 5, 17)
A = outer(1:5, 1:5, "-")%%5
A
b <- c(7, -1, -3, 5, 17)
A = outer(1:5, 1:5, "-")%%4
A
b <- c(7, -1, -3, 5, 17)
A = outer(1:5, 1:5, "-")%%4
A
b <- c(7, -1, -3, 5, 17)
A = outer(1:5, 1:5, "-")%%4
A
b <- c(7, -1, -3, 5, 17)
A = outer(1:5, 1:5, "-")
A
x <- outer(0:4, 0:4, "+")%%5
x
y <- outer(0:9, 0:9, "+")%%10
y
z <- outer(0:8, 0:8, "-")
z
x <- outer(0:4, 0:4, "+")%%5
x
y <- outer(0:9, 0:9, "+")%%10
y
z <- outer(0:8, 0:8, "-")%%9
z
b <- c(7, -1, -3, 5, 17)
A <- matrix(0, nrow = 5, ncol = 5)
A
b <- c(7, -1, -3, 5, 17)
A <- matrix(0, nrow = 5, ncol = 5)
A <- abs(col(A)-row(A))
A
b <- c(7, -1, -3, 5, 17)
A <- matrix(0, nrow = 5, ncol = 5)
A <- abs(col(A)-row(A)) + 1
A
b <- c(7, -1, -3, 5, 17)
A <- matrix(0, nrow = 5, ncol = 5)
A <- abs(col(A)-row(A)) + 1
A
solve(A, b)
b <- c(7, -1, -3, 5, 17)
A <- matrix(0, nrow = 5, ncol = 5)
A <- abs(col(A)-row(A)) + 1
A
x <- solve(A, b)
x
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
nrow(aMat>4)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
nrow(aMat>4)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
apply(aMat, 1, function(x) {sum(x>4)})
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
which(sum(colSum(aMat == 7))==2
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
which(sum(colSum(aMat == 7))==2)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
which(sum(colSums(aMat == 7))==2)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
which(sum(aMat == 7)==2)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
colsums(aMat == 7)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
colSums(aMat == 7)
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
colSums(aMat == 7) == 2
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat>4)
which(colSums(aMat == 7) == 2)
colSums(aMat>4)
which(colSums(aMat == 7) == 2)
aColSums <- colSums(aMat)
aColSums <- colSums(aMat)
aColSums
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
aColSums <- colSums(aMat)
aColSums
aColSums <- colSums(aMat)
aColSums
aColSums <- colSums(aMat)
aColSums
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
aMat
aColSums <- colSums(aMat)
aColSums
aColSums <- colSums(aMat)
aColSums
which(outer(aColSums, aColSums, "+")>75, arr.ind = T)
sum( (1:20)^4 ) * sum( 1/(4:8) )
sum(outer((1:20)^4,4:8,"/"))
sum(outer((1:20)^4,1:5,"/"))
sum(outer((1:20)^4,4:8,"/"))
sum((1:20)^4 / (3 + outer(1:20, 1:5, "*")))
sum(outer(1:10,1:10,function(i,j) {(i>=j)*i^4/(3+i*j)}))
view(mtcars)
view("mtcars")
data("mtcars")
str(mtcars)
View(mtcars)
mt[3, 1]
mt[3, 1]
mtcars[3, 1]
mt
mt
wr-spread.csv")
mt
is.data.frame(mt)
is.list(mt)
mtScyl
mt[3, 1]
wr-spread.csv")
is.data.frame(mt)
is.list(mt)
mtScyl
mt[3, 1]
wr.csv(mtcars, "mt-spread.csv")
is.data.frame(mt)
data(mtcars)
data("mtcars")
mt$cyl
write.csv("mtcars", "mt-spread.csv")
write.csv(mtcars, "mt-spread.csv")
mt <- read.csv("mt-spread.csv")
mt <- read.csv("mt-spread.csv")
is.data.frame(mt)
is.list(mt)
mt$cyl
mt[3, 1]
set.seed(2018)
dat1 <- runif(12)
mat1
set.seed(2018)
dat1 <- as.integer(10*runif(12))
mat1 <- matrix(dat1, nrow = 3, byrow = TRUE)
mat1
set.seed(2018)
dat1 <- as.integer(10*runif(12))
mat1 <- matrix(dat1, nrow = 3, byrow = TRUE)
mat1
source('~/Documents/MA415/MA415/1-31.R')
set.seed(2018)
dat1 <- as.integer(10*runif(12))
mat1 <- matrix(dat1, nrow = 3, byrow = TRUE)
mat1
#apply((matrix, margin- 1 or 2), function)
#1 is rows first
#2 is cols first
apply(mat1, 2, sum)
#apply((matrix, margin- 1 or 2), function)
#1 is rows first
#2 is cols first
apply(mat1, 2, sum)
#apply((matrix, margin- 1 or 2), function)
#1 is rows first
#2 is cols first
apply(mat1, 2, sum)
rowSums(mat1)
colSums(mat1)
source('~/Documents/MA415/MA415/1-31.R')
return (sum(v)+20)
return (sum(v)+20)
source('~/Documents/MA415/MA415/1-31.R')
source('~/Documents/MA415/MA415/1-31.R')
source('~/Documents/MA415/MA415/1-31.R')
myfunc(a)
source('~/Documents/MA415/MA415/1-31.R')
myfunc(mat1)
as.character(mat1[,2])
as.character(mat1)
as.character(mat1, as.character(mat1[,2]))
cbind(as.character(mat1, as.character(mat1[,2])))
cbind(as.character(mat1))
source('~/Documents/MA415/MA415/1-31.R')
df2 <- cbind(df1, c2)
myfunc(a)
myfunc(mat1)
apply(mat1, 1, myfunc)
df1 <- as.data.frame(mat1)
c2 <- as.character(mat1[,2])
df2 <- cbind(df1, c2)
set.seed(2018)
dat1 <- as.integer(10*runif(12))
mat1 <- matrix(dat1, nrow = 3,ncol = 3, byrow = TRUE)
mat1
#apply((matrix, margin- 1 or 2), function)
#1 is rows first
#2 is cols first
apply(mat1, 2, sum)
myfunc <- function(v){
return (sum(v)+20)
}
a<- 2:4
myfunc(a)
myfunc(mat1)
apply(mat1, 1, myfunc)
df1 <- as.data.frame(mat1)
c2 <- as.character(mat1[,2])
df2 <- cbind(df1, c2)
x <- c(2, 5, 6, 7, 9, 4)
x1 <- c(x, NA)
mean(x)
mean(x1)
mean(x1, na.rm = TRUE)
source('~/Documents/MA415/MA415/1-31.R')
x <- c(2, 5, 6, 7, 9, 4)
x1 <- c(x, NA)
mean(x)
mean(x1)
mean(x1, na.rm = TRUE)
?t.test
set.seed(42)
x <- 1:10
e <- rnorm(10, 0, 1)
y = x + e
t.test(x, y)
t.test(x, y, paired = TRUE)
cor(x, y)
plot(x~y)
model <- lm(y~x)
#lm = linear model
summary(model)
plot(model)
model <- lm(y~x)
summary(model)
plot(model)
plot(x~y)
plot(model)
abline(model)
plot(y~x)
abline(model)
#iris dataset
iris
head(iris)
iris$Species
iris[5, ]
iris[ ,5]
iris$Sepal.Length
mean(iris$Sepal.Length)
iris$Sepal.Length
#data cleaning
iris$Sepal.Length[15] <- 999
head(iris)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length.na == TRUE)
mean(iris$Sepal.Length, na.rm == TRUE)
mean(iris$Sepal.Length, na.rm = TRUE)
iris.$Sepal.Length[15] <- NA
iris$Sepal.Length[15] <- NA
mean(iris$Sepal.Length)
mean(iris$Sepal.Length, na.rm = TRUE)
us.na(q)
iris[5, ]
iris[ ,5]
q <- NA
is.na(q)
iris <- na.omit(iris)
sum(is.na(iris$Sepal.Length))
iris <- data("iris")
iris <- data("iris")
model2 <- lm(Sepal.Length ~ Petal.Length + species, data = iris)
iris <- data("iris")
model2 <- lm(Sepal.Length ~ Petal.Length + species, data = iris)
sumarry(model2)
summary(model2)
model2 <- lm(Sepal.Length ~ Petal.Length + species, data = iris)
model2 <- lm(Sepal.Length ~ Petal.Length + Species, data = iris)
model2 <- lm(Sepal.Length ~ Petal.Length * Species, data = iris)
model3 <- lm(Sepal.Length ~ Petal.Length * Species, data = iris)
A2010 <- read.csv("BP Apprehensions 2010.csv", header = TRUE, stringsAsFactors = FALSE)
rownames(A2010) <- A2010[,1]
A2010[,1]
A2010 <- subset(A2010, select = -c(Sector))
rownames(A2010)
A2010 <- rbind(A2010, colSums(A2010))
rownames(A2010)
A2010 <- read.csv("BP Apprehensions 2010.csv", header = TRUE, stringsAsFactors = FALSE)
A2010 <- read.csv("BP Apprehensions 2010(1).csv", header = TRUE, stringsAsFactors = FALSE)
rownames(A2010) <- A2010[,1]
A2010[,1]
A2010 <- subset(A2010, select = -c(Sector))
rownames(A2010)
A2010 <- rbind(A2010, colSums(A2010))
rownames(A2010)
A2010 <- cbind(A2010, rowSums(A2010))
rownames(A2010)
-length(rownames(A2010))
view(A2010)
View(A2010)
x <- -length(rownames(A2010))
rownames(A2010) <- c(rownames(A2010)[x], "Total")
colnames(A2010) <- c(colnames(A2010)[x], "Total")
A2010 <- cbind(A2010, rowSums(A2010))
colnames(A2010) <- c(colnames(A2010)[x], "Total")
?barplot
barplot(A2010[1:9, 13], names.arg = rownames(A2010)[1:9])
barplot(A2010[1:9, 13],
names.arg = rownames(A2010[1:9])
las = 2,
axisnames = TRUE,
main = "2010 Border Patrol Apprehension by Sector",
border = "blue",
col = "yellow")
barplot(A2010[1:9, 13],
names.arg = rownames(A2010[1:9]),
las = 2,
axisnames = TRUE,
main = "2010 Border Patrol Apprehension by Sector",
border = "blue",
col = "yellow")
barplot(A2010[1:9, 13],
names.arg = rownames(A2010)[1:9],
las = 2,
axisnames = TRUE,
main = "2010 Border Patrol Apprehension by Sector",
border = "blue",
col = "yellow")
knitr::opts_chunk$set(echo = TRUE)
vec <- seq[1:n]
1 + sum((x^1:n)/ (1:n))
c
c <- tmpFn3(1,
tempFn3 <- function(x, n){
1 + sum((x^1:n)/ (1:n))
}
c <- tmpFn3(1, 4)
tempFn3 <- function(x, n){
1 + sum((x^1:n)/ (1:n))
}
c <- tmpFn3(1, 4)
tmpFn3 <- function(x, n){
1 + sum((x^1:n)/ (1:n))
}
c <- tmpFn3(1, 4)
c
tmpFn3 <- function(x, n){
1 + sum((x^(1:n)/ (1:n))
}
tmpFn3 <- function(x, n){
1 + sum((x^(1:n)/ (1:n))
}
tmpFn3 <- function(x, n){
1 + sum((x^(1:n))/ (1:n))
}
c <- tmpFn3(1, 4)
c
tmpFn3 <- function(x, n){
1 + sum((x^(1:n))/ (1:n))
}
c <- tmpFn3(1, 7)
c
tmpFn <- function(xvec){
n <- length(xvec)
(x[1:n-1] + x[2:n-1] + x[3:n]) / 3
}
tmpFn(c(1:5, 6:1))
tmpFn(c(1:5))
tmpFn <- function(xvec){
x <- length(xvec)
(xvec[1:x-1] + xvec[2:x-1] + xvec[3:x]) / 3
}
tmpFn(c(1:5, 6:1))
tmpFn <- function(xvec){
x <- length(xvec)
(xvec[1:x-2] + xvec[2:x-1] + xvec[3:x]) / 3
}
tmpFn(c(1:5, 6:1))
tmpFn <- function(xvec){
x <- length(xvec)
(xvec[1:(x-2)] + xvec[2:(x-1)] + xvec[3:x]) / 3
}
tmpFn(c(1:5, 6:1))
tmpFn <- function(xVec){
ifelse(xVec < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3), ifelse(x >= 2, x^2 + 4*x - 7))
}
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3), ifelse(x >= 2, x^2 + 4*x - 7))
}
xVec <- seq(-3, 3, len = 100)
tmpFn(xVec)
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3), (x >= 2, x^2 + 4*x - 7))
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3, x^2 + 4*x - 7))
}
xVec <- seq(-3, 3, len = 100)
tmpFn(xVec)
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3, x^2 + 4*x - 7))
}
xVec <- seq(-3, 3, len = 10)
tmpFn(xVec)
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3, x^2 + 4*x - 7))
}
xVec <- seq(-5, 3, len = 10)
tmpFn(xVec)
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3, x^2 + 4*x - 7))
}
xVec <- seq(-3, 3, len = 10)
tmpFn(xVec)
xVec
tmpFn <- function(x){
ifelse(x < 0, x^2 + 2*x + 3, ifelse(x>= 0 & x< 2, x+3, x^2 + 4*x - 7))
}
xVec <- seq(-3, 3, len = 10)
xVec
tmpFn(xVec)
